#!/usr/bin/env python
PACKAGE = "hsv_reconfigure"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

# Create groups for each detector type
white_lane = gen.add_group("White Lane", state=True)
yellow_lane = gen.add_group("Yellow Lane", state=True)
traffic_light_red = gen.add_group("Traffic Light Red", state=True)
traffic_light_green = gen.add_group("Traffic Light Green", state=True)
cross_walk = gen.add_group("Cross Walk", state=True)

# Parameters for White Lane
white_lane.add("white_h_min", int_t, 0, "White H min", 0, 0, 179)
white_lane.add("white_h_max", int_t, 0, "White H max", 179, 0, 179)
white_lane.add("white_s_min", int_t, 0, "White S min", 0, 0, 255)
white_lane.add("white_s_max", int_t, 0, "White S max", 70, 0, 255)
white_lane.add("white_v_min", int_t, 0, "White V min", 165, 0, 255)
white_lane.add("white_v_max", int_t, 0, "White V max", 255, 0, 255)

# Parameters for Yellow Lane
yellow_lane.add("yellow_h_min", int_t, 0, "Yellow H min", 10, 0, 179)
yellow_lane.add("yellow_h_max", int_t, 0, "Yellow H max", 50, 0, 179)
yellow_lane.add("yellow_s_min", int_t, 0, "Yellow S min", 100, 0, 255)
yellow_lane.add("yellow_s_max", int_t, 0, "Yellow S max", 255, 0, 255)
yellow_lane.add("yellow_v_min", int_t, 0, "Yellow V min", 100, 0, 255)
yellow_lane.add("yellow_v_max", int_t, 0, "Yellow V max", 255, 0, 255)

# Parameters for Traffic Light Red (two ranges because red wraps around in HSV)
traffic_light_red.add("tl_red_h_min1", int_t, 0, "TL Red H min 1", 0, 0, 179)
traffic_light_red.add("tl_red_h_max1", int_t, 0, "TL Red H max 1", 10, 0, 179)
traffic_light_red.add("tl_red_h_min2", int_t, 0, "TL Red H min 2", 170, 0, 179)
traffic_light_red.add("tl_red_h_max2", int_t, 0, "TL Red H max 2", 180, 0, 179)
traffic_light_red.add("tl_red_s_min", int_t, 0, "TL Red S min", 100, 0, 255)
traffic_light_red.add("tl_red_s_max", int_t, 0, "TL Red S max", 255, 0, 255)
traffic_light_red.add("tl_red_v_min", int_t, 0, "TL Red V min", 100, 0, 255)
traffic_light_red.add("tl_red_v_max", int_t, 0, "TL Red V max", 255, 0, 255)

# Parameters for Traffic Light Green
traffic_light_green.add("tl_green_h_min", int_t, 0, "TL Green H min", 40, 0, 179)
traffic_light_green.add("tl_green_h_max", int_t, 0, "TL Green H max", 80, 0, 179)
traffic_light_green.add("tl_green_s_min", int_t, 0, "TL Green S min", 100, 0, 255)
traffic_light_green.add("tl_green_s_max", int_t, 0, "TL Green S max", 255, 0, 255)
traffic_light_green.add("tl_green_v_min", int_t, 0, "TL Green V min", 100, 0, 255)
traffic_light_green.add("tl_green_v_max", int_t, 0, "TL Green V max", 255, 0, 255)

# Parameters for Cross Walk (for red detection)
cross_walk.add("cw_red_h_min1", int_t, 0, "CW Red H min 1", 0, 0, 179)
cross_walk.add("cw_red_h_max1", int_t, 0, "CW Red H max 1", 15, 0, 179)
cross_walk.add("cw_red_h_min2", int_t, 0, "CW Red H min 2", 170, 0, 179)
cross_walk.add("cw_red_h_max2", int_t, 0, "CW Red H max 2", 180, 0, 179)
cross_walk.add("cw_red_s_min", int_t, 0, "CW Red S min", 9, 0, 255)
cross_walk.add("cw_red_s_max", int_t, 0, "CW Red S max", 255, 0, 255)
cross_walk.add("cw_red_v_min", int_t, 0, "CW Red V min", 19, 0, 255)
cross_walk.add("cw_red_v_max", int_t, 0, "CW Red V max", 255, 0, 255)

# ROI parameters for Traffic Light
traffic_light_red.add("tl_roi_x", int_t, 0, "TL ROI X", 200, 0, 640)
traffic_light_red.add("tl_roi_y", int_t, 0, "TL ROI Y", 60, 0, 480)
traffic_light_red.add("tl_roi_width", int_t, 0, "TL ROI Width", 80, 10, 640)
traffic_light_red.add("tl_roi_height", int_t, 0, "TL ROI Height", 120, 10, 480)

# ROI parameters for Crosswalk
cross_walk.add("cw_roi_x", int_t, 0, "CW ROI X", 4, 0, 640)
cross_walk.add("cw_roi_y", int_t, 0, "CW ROI Y", 90, 0, 480)
cross_walk.add("cw_roi_width", int_t, 0, "CW ROI Width", 280, 10, 640)
cross_walk.add("cw_roi_height", int_t, 0, "CW ROI Height", 75, 10, 480)

exit(gen.generate(PACKAGE, "hsv_reconfigure", "HSVTuner"))